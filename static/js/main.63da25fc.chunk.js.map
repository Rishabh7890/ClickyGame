{"version":3,"sources":["components/Game.js","App.js","serviceWorker.js","index.js"],"names":["Game","state","cardInfo","Object","toConsumableArray","currentScore","highScore","handleClick","cardId","isCorrect","_this","forEach","card","id","clicked","handleCorrectPick","handleIncorrectPick","shuffled","sort","Math","random","setState","_this2","this","react_default","a","createElement","Fragment","className","src","alt","map","key","image","name","onClick","Component","App","components_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OA6GeA,oNAxGbC,MAAQ,CACNC,SAASC,OAAAC,EAAA,EAAAD,CAAKD,GACdG,aAAc,EACdC,UAAW,KAIbC,YAAc,SAAAC,GACZ,IAAIC,GAAY,EAEVP,EAAQC,OAAAC,EAAA,EAAAD,CAAOO,EAAKT,MAAMC,UAEhCA,EAASS,QAAQ,SAAAC,GACXA,EAAKC,KAAOL,IACTI,EAAKE,UACRL,GAAY,EACZG,EAAKE,SAAU,MAKrBL,EACIC,EAAKK,kBAAkBb,GACvBQ,EAAKM,oBAAoBd,MAI/Ba,kBAAoB,SAAAb,GAClB,IAAMe,EAAWf,EAASgB,KAAK,iBAAM,GAAMC,KAAKC,WAE1Cf,EAAeK,EAAKT,MAAMI,aAAe,EAE3CC,EAAYI,EAAKT,MAAMK,UAEvBD,EAAeC,IACjBA,EAAYD,GAGdK,EAAKW,SAAS,CACZnB,SAAUe,EACVZ,aAAcA,EACdC,UAAWA,OAKfU,oBAAsB,SAAAd,GACpB,IAAMe,EAAWf,EAASgB,KAAK,iBAAM,GAAMC,KAAKC,WAEhDH,EAASN,QAAQ,SAAAC,GAAI,OAAKA,EAAKE,SAAU,IAEzCJ,EAAKW,SAAS,CACZnB,SAAUe,EACVZ,aAAc,6EAIT,IAAAiB,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,4DACbJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,yCAAhB,oCACAJ,EAAAC,EAAAC,cAAA,QAAME,UAAU,wBAAhB,kBACkBL,KAAKtB,MAAMI,aAD7B,0BACkE,IAC/DkB,KAAKtB,MAAMK,YAGhBkB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,8DACbJ,EAAAC,EAAAC,cAAA,UACG,IACDF,EAAAC,EAAAC,cAAA,OAAKG,IAAI,2BAA2BC,IAAI,OAF1C,oCAKAN,EAAAC,EAAAC,cAAA,kGAKFF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,kDAGZL,KAAKtB,MAAMC,SAAS6B,IAAI,SAAAnB,GACvB,OACEY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gCAAgCI,IAAKpB,EAAKC,IACvDW,EAAAC,EAAAC,cAAA,OACEG,IAAKjB,EAAKqB,MACVH,IAAKlB,EAAKsB,KACVN,UAAU,mDACVO,QAAS,kBAAMb,EAAKf,YAAYK,EAAKC,WAM/CW,EAAAC,EAAAC,cAAA,UAAQE,UAAU,iBACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAf,0DAjGKQ,cCEJC,EAFH,kBAAMb,EAAAC,EAAAC,cAACY,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.63da25fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport cardInfo from \"../cards.json\";\nimport \"../App.css\";\n\nclass Game extends Component {\n  state = {\n    cardInfo: [...cardInfo],\n    currentScore: 0,\n    highScore: 0\n  };\n\n  // method for handling click\n  handleClick = cardId => {\n    let isCorrect = false;\n\n    const cardInfo = [...this.state.cardInfo];\n\n    cardInfo.forEach(card => {\n      if (card.id === cardId) {\n        if (!card.clicked) {\n          isCorrect = true;\n          card.clicked = true;\n        }\n      }\n    });\n\n    isCorrect\n      ? this.handleCorrectPick(cardInfo)\n      : this.handleIncorrectPick(cardInfo);\n  };\n\n  // method for correct pick\n  handleCorrectPick = cardInfo => {\n    const shuffled = cardInfo.sort(() => 0.5 - Math.random());\n\n    const currentScore = this.state.currentScore + 1;\n\n    var highScore = this.state.highScore;\n\n    if (currentScore > highScore) {\n      highScore = currentScore;\n    }\n\n    this.setState({\n      cardInfo: shuffled,\n      currentScore: currentScore,\n      highScore: highScore\n    });\n  };\n\n  // method for incorrect pick to reset score \n  handleIncorrectPick = cardInfo => {\n    const shuffled = cardInfo.sort(() => 0.5 - Math.random());\n\n    shuffled.forEach(card => (card.clicked = false));\n\n    this.setState({\n      cardInfo: shuffled,\n      currentScore: 0\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-light bg-dark d-flex justify-space-between\">\n          <span className=\"navbar-brand mb-0 text-light initText\">More Character sets coming soon!</span>\n          <span className=\"scoreInfo text-light\">\n            Current Score: {this.state.currentScore} || Your Highest Score:{\" \"}\n            {this.state.highScore}\n          </span>\n        </nav>\n        <div className=\"jumbotron jumbotron-fluid text-center text-light jumboCust\">\n          <h1>\n            {\" \"}\n            <img src=\"../images/dragonball.png\" alt=\"db\" /> Dragonball Z Memory\n            Clicky Game\n          </h1>\n          <p>\n            Click on a card to start playing! Don't click on the same card twice\n            or you'll lose!\n          </p>\n        </div>\n        <div className=\"container-fluid\">\n          <div className=\"row align-items-center justify-content-between\">\n            {/* print out cards here */}\n\n            {this.state.cardInfo.map(card => {\n              return (\n                <div className=\"col-12 col-sm-3 col-md-2 my-3\" key={card.id}>\n                  <img\n                    src={card.image}\n                    alt={card.name}\n                    className=\"img-fluid img-thumbnail rounded indvCard bg-dark\"\n                    onClick={() => this.handleClick(card.id)}\n                  />\n                </div>\n              );\n            })}\n          </div>\n          <footer className=\"sticky-bottom\">\n              <div className=\"container-fluid\">Created By Rishabh Goel Copyright &copy; 2019 </div>\n            </footer>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\n\nconst App = () => <Game/>\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}